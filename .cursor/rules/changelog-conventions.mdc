---
alwaysApply: true
---

# Changelog Conventions

After changing anything in the code, update the correct changelog file accordingly.

## Multiple Changelog Files

This repository contains multiple subprojects, each with its own `Changelog.md` file

**Always update the Changelog.md file in the specific subproject you're modifying to track changes applied to each sub project.**

## Basic Workflow

1. **During development**: Add all changes to the `## WIP` section at the top of the appropriate Changelog.md file
2. **During release**: The WIP entries will become the content of the new version section

## Sections and Structure

### WIP Section

- Located at the top of the file after the title
- Format: `## WIP` followed by bullet point entries
- This is where all unreleased changes should be documented

### Version Sections

- Format: `## X.Y.Z (YYYY-MM-DD)` where:
  - X.Y.Z is the version number
  - YYYY-MM-DD is the current date at release time
- Example: `## 6.45.0 (2025-05-19)`

## Entry Guidelines

- Start each entry with a dash `-`
- For issue references, place them at the start: `- 10469: fixed bug in...`
- Group related changes together
- Use backticks for code references: `` `methodName` ``
- Use indentation for sub-details:
  ```
  - New feature X
      - Detail 1
      - Detail 2
  ```

## Entry Categories

- **New features**: Usually warrant a MINOR version bump
- **Bugfixes**: Usually warrant a PATCH version bump
- **Breaking changes**: Usually warrant a MAJOR version bump (mark these clearly)
- **Internal improvements**: Depends on impact

## Best Practices

- Be specific about what changed
- Document regression tests when added
- For API changes, document both old and new behavior
- Use consistent terminology
- Keep entries concise but descriptive
- Do not manually add version headers - they are added by the release script
